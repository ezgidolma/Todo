// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Role {
  USER
  ADMIN
}

model Workspace {
  id        String   @id @default(uuid())
  title     String
  boards    Board[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id])
}

model Board {
  id          String        @id @default(uuid())
  title       String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  lists       List[]
  tasks       Task[]
  createdBy   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [createdBy], references: [id])
  members     BoardMember[]
}

model List {
  id        String   @id @default(uuid())
  title     String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id            String     @id @default(uuid())
  title         String
  description   String?
  dueDate       DateTime?
  list          List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId        String
  status        TaskStatus @default(TODO)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  board         Board      @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId       String
  comments      Comment[]
  coverImageUrl String?
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  boardMembers BoardMember[]
  role         Role          @default(USER)
  workspaces   Workspace[]
  boards       Board[]
}

model BoardMember {
  id        String   @id @default(uuid())
  boardId   String
  userEmail String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  isStarred Boolean  @default(false)
  isAdmin   Boolean  @default(false)
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userEmail String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
